/* @flow */

import type {Address} from "./signal"

export type ThreadID = number
export type Time = number
export type ProcessID = number

export type Abort <reason> =
  (reason:reason) => void;

export interface Process <error, value, message, reason>
  { id: ProcessID
  , isActive: boolean
  , kill(reson:reason):void
}

declare export class Task <x, a>
  { static create <x, a> (fork:(succeed:(a:a) => void, fail:(x:x) => void) => ?Abort<any>): Task<x, a>
  , static future <x, a> (request:() => Promise<a>): Task<x, a>
  , static succeed <x, a> (value:a): Task<x, a>
  , static fail <x, a> (error:x): Task<x, a>
  , static spawn <x, y, a> (task:Task<x, a>): Task<y, ThreadID>
  , static sleep <x> (time:Time): Task<x, void>
  , static send <x, a> (address:Address<a>, action:a):Task<x, void>
  , static fork <x, a, message, reason> (task:Task<x, a>, succeed:(a:a) => void, fail:(x:x) => void):Process<x, a, message, reason>

  , constructor (execute:(succeed:(a:a) => void, fail:(x:x) => void) => ?Abort<any>):void
  , chain <b> (chain:(a:a) => Task<x,b>): Task<x,b>
  , map <b> (map:(input:a) => b): Task<x, b>
  , capture <y> (capture:(error:x) => Task<y, a>): Task<y, a>
  , format <y> (format:(error:x) => y): Task<y, a>
  , fork (succeed:(a:a) => void, fail:(x:x) => void):void
}
