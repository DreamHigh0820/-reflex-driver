/* @flow */

import type {DOM} from "./dom"
import type {VirtualRoot} from "./driver"
import type {Address, Signal, Mailbox} from "./signal"
import type {Never} from "./effects"

import {Task} from "./task"
import {Effects} from "./effects"

export type Application <model, action> =
  { address: Address<action>
  , model: Signal<model>
  , view: Signal<VirtualRoot>
  , task: Signal<Effects<action>>
  }


export type BeginnerConfiguration <model, action> =
  { model: model
  , update: (model:model, action:action) => model
  , view: (model:model, address:Address<action>) => DOM
  }

export type AdvancedConfiguration <model, action, flags> =
  { flags: flags
  , init: (options:flags) => [model, Effects<action>]
  , update: (model:model, action:action) => [model, Effects<action>]
  , view: (state:model, address:Address<action>) => DOM
  }

declare export function beginner <model, action>
  (configuration:BeginnerConfiguration<model, action>):
  AdvancedConfiguration<model, action, void>

declare export function start <model, action, flags>
  (configuration:AdvancedConfiguration<model, action, flags>):
  Application<model, action>
