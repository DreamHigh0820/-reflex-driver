/* @flow */

import type {Address} from "./signal"

export type Key = string
export type TagName = string
export type Text = string

export type VirtualText = {
  $type: "VirtualText",
  text: string
};

export type VirtualNode = {
  $type: "VirtualNode",
  key: ?Key,
  tagName: TagName,
  namespace: ?string,
  children: Array<VirtualTree>
};

export type Thunk = {
  $type: "Thunk",
  key: Key,
};

export type Widget = {
  $type: "Widget",
  initialize: () => Element,
  update: (previous:Widget, node:Element) => ?Element,
  destroy: (node:Element) => void
}

export type Arguments <params> = Array<any>
export type View <params> = (...args:Array<any>) => VirtualTree

export type LazyTree <Tree> = {
  $type: "LazyTree",
  force: () => Tree
}

export type VirtualTree
  = Text
  | VirtualText
  | VirtualNode
  | Thunk
  | Widget
  | LazyTree <VirtualNode>
  | LazyTree <Thunk>

export type DOM = VirtualTree

export type AttributeDictionary = {
  [key:string]: string|number|boolean
}

export type StyleDictionary = {
  [key:string]: string|number|boolean
}

export type PropertyDictionary = {
  attributes?: AttributeDictionary,
  style?: StyleDictionary,
  [key:string]: any
}

export type RootView <model, action> =
  (model:model, address:Address<action>) =>
  VirtualTree;

declare export class VirtualRoot <model, action> {
  $type: "VirtualRoot";

  view: RootView<model, action>;
  model: model;
  address: Address<action>;
  constructor
  ( view:RootView<model, action>
  , model:model
  , address:Address<action>
  ):void;
  renderWith(driver:any):void
}

declare export function text
  (content:Text):
  Text | VirtualText

declare export function node
  ( tagName:TagName
  , properties:?PropertyDictionary
  , children:?Array<VirtualTree>
  ):
  VirtualNode | LazyTree<VirtualNode>

declare export function thunk <a, b, c, d, e, f, g, h, i, j>
  ( key:string
  , view:(a:a, b:b, c:c, d:d, e:e, f:f, g:g, h:h, i:i, j:j) => VirtualTree
  , a:a
  , b:b
  , c:c
  , d:d
  , e:e
  , f:f
  , g:g
  , h:h
  , i:i
  , j:j
  ):
  Thunk | LazyTree<Thunk>
